<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
		<!-- <layout class = "org.apache.log4j.PatternLayout">
			<param name = "ConversionPattern" value = "%-5p : [%c{1}] - %m%n" />
		</layout> -->
	</appender>
	
	<!-- 발생된 로그들을 파일로 따로 저장시키는 방법 -->
	<appender name="fileLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="C:\\logs\\system.log" />
		<param name="DatePattern" value="yyyy-MM-dd" />
		<param name="Append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
			 value="[%d{HH:mm:ss}][%-5p][%F : %L] - %m%n" />
			
		</layout>
	</appender>
	
	<!-- sql query 문과 resultset 결과를 출력하기 위한 apperder -->
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" 
			value="%-5p : %m%n" />	
		</layout>		
	</appender> <!-- logger 추가 등록해야 함 -->
	
	<!-- layout 에 사용하는 로그 패턴 문자
		%[자릿수]패턴 문자
		자릿수: 출력할 정수 지정(정수:오른쪽 정렬,음수: 왼쪽정렬)
		%p :priority(우선순위) , debug,info,error,fatal 등의 순위 출력

		%m :로그 메세지(messages) 출력
	
		%n : new line 줄바꿈,(enter)를 의미함
		
		%c,%C : 카테고리(Category) 또는 클래스 명(full class name) 출력
		   %c{2} 는 패키지명을 a.b.c일경우b.c만 출력을 의미함.
		   %c{1}은 a.b.c 패키지명을 c만 출력하라는 의미.
		
		&d : datetime,로깅 이벤트가 발생한 날짜와 시간을 출력
		     포멧은 %d{yyyy-mm-dd HH:mm:ss SSS} 의 형태로 사용됨
		     java.text.SimpleDateFormat 의 포멧을 사용하면 됨
		
		%t : thread,로그 이벤트가 발생된 쓰레드의 이름을 출력 
		
		%% : %문자 하나 출력
		
		%F : 로그 이벤트가 발생한 프로그램 파일 명 출력을 의미함
		
		%L : LineNumber,로깅을 발생시킨 caller의 줄 번호로 출력
		
		%l : caller,로깅을 발생시킨 caller의 정보를 출력
		
		%M : Method,로깅을 발생시킨 Method의 이름 출력
		
		%r : 어플리케이션 시작부터 로깅이 발생한 시점까지의 시간(millisecconds)
		
		%x : 로깅이 발생한 스레드의 관련된 NOC(Nested Diagonostic Context)출력
		
		%X : NOC 출력, %X{key} 형태로 출력
		     
	-->
	
	<!-- Application Loggers -->
	<logger name="com.ict.testapp">
		<level value="info" />
	</logger>
	
<!-- intercepter 패키지 logger 등록을 할 경우 : 특정 패키지를 로거로 등록한 경우 -->
	<logger name="com.ict.testapp.common.interceptor.Loggerinterceptor">
		<level value="debug" />
	</logger>
	
	<!-- sql query logger -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlLogger" />
	</logger>
	
	<logger name="jdbc.resultsettable" additivity="false">
		<lebel value="info" />
		<append-ref ref="sqlLogger" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="fileLogger" />
	</root>
	
</log4j:configuration>
